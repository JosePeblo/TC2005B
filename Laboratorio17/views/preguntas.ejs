<%- include('includes/head.ejs') %>
<%- include('includes/mainNav.ejs') %>

<section class="section content" style="height: 100vh;">
    <nav class="breadcrumb" aria-label="breadcrumbs">
        <ul>
            <li><a href="/">Recetas Foráneas</a></li>
            <li class="is-active"><a href="">Preguntas</a></li>
        </ul>
    </nav>
    

    <h3>¿Qué ventajas tiene escribir el código SQL únicamente en la capa del modelo?</h3>
    <p>
        Que de esta manera solo nos tenemos que preocupar por modificar el modelo 
        cuando el controlador funciona correctamente pero los datos que obtiene no 
        son correctos. <br>
        Al separar este podemos mantener nuestro código más facilemnte haciendo 
        pruebas para determinar si el problema es de ruteo, de las vistas, 
        del controlador o de los datos que nos regresa la base de datos.
    </p>
    <h3>¿Qué es SQL injection y cómo se puede prevenir?</h3>
    <p>
        Es el aprovecharse de que la forma de comunicarse con el servidor de 
        base de datos es por medio de comandos escritos en texto plano; esto, 
        si no se tiene una capa de protección, puede resultar en que se escape 
        el comando y se realicen acciones que un atacante pueda plantar en nuestra
        base de datos. Por otra parte también se puede dar acceso a registros 
        que no sean permitidos para ese usuario, entre otras cosas más. <br>
        Una forma de prevenir la inyeccion de SQL es usando queries parametrizadas 
        básicamente creando una query con '?' en donde vayan los parámetros 
        dados por el usuario y posteriormente agregarlos en una lista. En nodejs 
        podemos hacer esto dentro de la misma función para realizar la query, 
        esto nos permite incluir todos los datos como texto que no escape la 
        query y realice queries adicionales.
    </p>
</section>

<%- include('includes/foot.ejs') %>